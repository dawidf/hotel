<?php

namespace Hotel\AdminBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Validator\Constraints\DateTime;

/**
 * RoomRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RoomRepository extends EntityRepository
{
    public function getAvalibleRooms($params = array(), $getQuery = false)
    {
        $startDate = $params['startReservation'];
        $endDate = $params['endReservation'];

        // nie kasowac
//        $qb = $this->createQueryBuilder('room_repository')
//            ->select('room_repository', 'reservations')
//            ->leftJoin('room_repository.reservations', 'reservations')
//            ->where('(reservations.startReservation <= :startDate and reservations.endReservation > :startDate)
//             or (reservations.startReservation < :endDate and reservations.endReservation >= :endDate)
//             or (reservations.startReservation > :startDate and reservations.endReservation < :endDate)')
//                ->setParameter(':startDate', $startDate)
//                ->setParameter(':endDate', $endDate)
//            ->andWhere('room_repository.numberOfPeople = :peopleOfRoom')
//                ->setParameter('peopleOfRoom', $params['peopleOfRoom'])
//        ;


        $qb = $this->getEntityManager()->createQueryBuilder();
            $qb->select("room_repository.id")
                ->from('HotelAdminBundle:Room', 'room_repository')
                ->leftJoin('room_repository.reservations', 'reservations')
                ->where('(reservations.startReservation <= :startDate and reservations.endReservation > :startDate)
                     or (reservations.startReservation < :endDate and reservations.endReservation >= :endDate)
                     or (reservations.startReservation > :startDate and reservations.endReservation < :endDate)')
                    ->setParameter(':startDate', $startDate)
                    ->setParameter(':endDate', $endDate)
                ->andWhere('room_repository.numberOfPeople = :peopleOfRoom')
                    ->setParameter('peopleOfRoom', $params['peopleOfRoom'])
                ->groupBy('room_repository.id')
                ;





        if($getQuery == false)
        {
            return count($qb->getQuery()->getArrayResult());
        }
        else
        {
            $result = array();
            foreach($qb->getQuery()->getResult() as $key => $value)
            {
                $result[] = $value['id'];
            }


            $result = implode(',', $result);
            return $result;


        }
    }

    public function countRooms($numberOfPeople)
    {

        $qb = $this->createQueryBuilder('room_repository')
            ->select('count(room_repository.id)')
            ->where('room_repository.numberOfPeople = :peopleOfRoom')
                ->setParameter('peopleOfRoom', $numberOfPeople)

        ;

        $qb = (int)$qb->getQuery()->getSingleScalarResult();

        return $qb;
    }

    public function getNextAvailableDate($params = array())
    {
//        var_dump($params);

//        $startDate = ($params['startDate']);
//        $endDate = ($params['endDate']);



        /*$qb = $this->createQueryBuilder('room_repository')
            ->select('room_repository', 'reservations')
            ->leftJoin('room_repository.reservations', 'reservations')
            ->where("reservations.startReservation >= :startDate")
                ->setParameter(':startDate', $startDate)
            ->andWhere(":endDate <= reservations.endReservation")
                ->setParameter(':endDate', $endDate)
            ->andWhere('room_repository.numberOfPeople = :peopleOfRoom')
                ->setParameter('peopleOfRoom', $params['peopleOfRoom'])
            ->orderBy('reservations.startReservation')
        ;*/
        /*$query = $this->getDoctrine()->getEntityManager()->createQueryBuilder();
        $a = array('001', '000');
        $query
            ->select('room.roomNumber')
            ->from('HotelAdminBundle:Room', 'room')
            ->leftjoin('room.reservations', 'reservations')
            ->andWhere($query->expr()->notIn('room.roomNumber', $a))
        ;*/


        $BusyRooms = $this->getAvalibleRooms($params, true);



//        var_dump($BusyRooms);
        $qb = $this->getEntityManager()->createQueryBuilder();

            $qb
                ->select('room.id, room.roomNumber')
                ->from('HotelAdminBundle:Room', 'room')
                ->where('room.numberOfPeople = :peopleOfRoom')
                    ->setParameter('peopleOfRoom', $params['peopleOfRoom'])

            ;

        if($BusyRooms != null)
        {

            $qb->andWhere($qb->expr()->notIn('room.id', $BusyRooms));
        }



        return $qb->getQuery()->setMaxResults(1)->getOneOrNullResult();






//        $nextAvalibleDate = $qb->getQuery()->getFirstResult();
//        $howManyNotAvalibleRooms = count($qb->getQuery()->getArrayResult());
//
//        $allRooms = $this->countRooms($params['peopleOfRoom']);
//
//
//        return $nextAvalibleDate;


    }
}
